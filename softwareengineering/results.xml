<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="6" name="pytest" skips="0" tests="6" time="0.633"><testcase classname="nextgenmusic.tests.test_urls.TestUrls" file="nextgenmusic\tests\test_urls.py" line="6" name="test_viewsongs_url" time="0.0009860992431640625"><failure message="django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.">self = &lt;test_urls.TestUrls object at 0x04759DF0&gt;

    def test_viewsongs_url(self):
&gt;       path = reverse(&apos;viewsongs&apos;)

softwareengineering\nextgenmusic\tests\test_urls.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\program files (x86)\python37-32\lib\site-packages\django\urls\base.py:30: in reverse
    resolver = get_resolver(urlconf)
c:\program files (x86)\python37-32\lib\site-packages\django\urls\resolvers.py:66: in get_resolver
    urlconf = settings.ROOT_URLCONF
c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:57: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = &apos;ROOT_URLCONF&apos;

    def _setup(self, name=None):
        &quot;&quot;&quot;
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn&apos;t
        configured settings manually.
        &quot;&quot;&quot;
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = (&quot;setting %s&quot; % name) if name else &quot;settings&quot;
            raise ImproperlyConfigured(
                &quot;Requested %s, but settings are not configured. &quot;
                &quot;You must either define the environment variable %s &quot;
                &quot;or call settings.configure() before accessing settings.&quot;
&gt;               % (desc, ENVIRONMENT_VARIABLE))
E           django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:42: ImproperlyConfigured</failure></testcase><testcase classname="nextgenmusic.tests.test_urls.TestUrls" file="nextgenmusic\tests\test_urls.py" line="10" name="test_joinus_url" time="0.0"><failure message="django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.">self = &lt;test_urls.TestUrls object at 0x047CC550&gt;

    def test_joinus_url(self):
&gt;       path = reverse(&apos;joinus&apos;)

softwareengineering\nextgenmusic\tests\test_urls.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\program files (x86)\python37-32\lib\site-packages\django\urls\base.py:30: in reverse
    resolver = get_resolver(urlconf)
c:\program files (x86)\python37-32\lib\site-packages\django\urls\resolvers.py:66: in get_resolver
    urlconf = settings.ROOT_URLCONF
c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:57: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = &apos;ROOT_URLCONF&apos;

    def _setup(self, name=None):
        &quot;&quot;&quot;
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn&apos;t
        configured settings manually.
        &quot;&quot;&quot;
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = (&quot;setting %s&quot; % name) if name else &quot;settings&quot;
            raise ImproperlyConfigured(
                &quot;Requested %s, but settings are not configured. &quot;
                &quot;You must either define the environment variable %s &quot;
                &quot;or call settings.configure() before accessing settings.&quot;
&gt;               % (desc, ENVIRONMENT_VARIABLE))
E           django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:42: ImproperlyConfigured</failure></testcase><testcase classname="nextgenmusic.tests.test_urls.TestUrls" file="nextgenmusic\tests\test_urls.py" line="14" name="test_signup_url" time="0.0"><failure message="django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.">self = &lt;test_urls.TestUrls object at 0x0477A1F0&gt;

    def test_signup_url(self):
&gt;       path = reverse(&apos;signup&apos;)

softwareengineering\nextgenmusic\tests\test_urls.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\program files (x86)\python37-32\lib\site-packages\django\urls\base.py:30: in reverse
    resolver = get_resolver(urlconf)
c:\program files (x86)\python37-32\lib\site-packages\django\urls\resolvers.py:66: in get_resolver
    urlconf = settings.ROOT_URLCONF
c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:57: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = &apos;ROOT_URLCONF&apos;

    def _setup(self, name=None):
        &quot;&quot;&quot;
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn&apos;t
        configured settings manually.
        &quot;&quot;&quot;
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = (&quot;setting %s&quot; % name) if name else &quot;settings&quot;
            raise ImproperlyConfigured(
                &quot;Requested %s, but settings are not configured. &quot;
                &quot;You must either define the environment variable %s &quot;
                &quot;or call settings.configure() before accessing settings.&quot;
&gt;               % (desc, ENVIRONMENT_VARIABLE))
E           django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:42: ImproperlyConfigured</failure></testcase><testcase classname="nextgenmusic.tests.test_urls.TestUrls" file="nextgenmusic\tests\test_urls.py" line="18" name="test_loginuser_url" time="0.0009984970092773438"><failure message="django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.">self = &lt;test_urls.TestUrls object at 0x04833510&gt;

    def test_loginuser_url(self):
&gt;       path = reverse(&apos;loginuser&apos;)

softwareengineering\nextgenmusic\tests\test_urls.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\program files (x86)\python37-32\lib\site-packages\django\urls\base.py:30: in reverse
    resolver = get_resolver(urlconf)
c:\program files (x86)\python37-32\lib\site-packages\django\urls\resolvers.py:66: in get_resolver
    urlconf = settings.ROOT_URLCONF
c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:57: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = &apos;ROOT_URLCONF&apos;

    def _setup(self, name=None):
        &quot;&quot;&quot;
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn&apos;t
        configured settings manually.
        &quot;&quot;&quot;
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = (&quot;setting %s&quot; % name) if name else &quot;settings&quot;
            raise ImproperlyConfigured(
                &quot;Requested %s, but settings are not configured. &quot;
                &quot;You must either define the environment variable %s &quot;
                &quot;or call settings.configure() before accessing settings.&quot;
&gt;               % (desc, ENVIRONMENT_VARIABLE))
E           django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:42: ImproperlyConfigured</failure></testcase><testcase classname="nextgenmusic.tests.test_urls.TestUrls" file="nextgenmusic\tests\test_urls.py" line="22" name="test_profile_url" time="0.0"><failure message="django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.">self = &lt;test_urls.TestUrls object at 0x0477AAF0&gt;

    def test_profile_url(self):
&gt;       path = reverse(&apos;profile&apos;)

softwareengineering\nextgenmusic\tests\test_urls.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\program files (x86)\python37-32\lib\site-packages\django\urls\base.py:30: in reverse
    resolver = get_resolver(urlconf)
c:\program files (x86)\python37-32\lib\site-packages\django\urls\resolvers.py:66: in get_resolver
    urlconf = settings.ROOT_URLCONF
c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:57: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = &apos;ROOT_URLCONF&apos;

    def _setup(self, name=None):
        &quot;&quot;&quot;
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn&apos;t
        configured settings manually.
        &quot;&quot;&quot;
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = (&quot;setting %s&quot; % name) if name else &quot;settings&quot;
            raise ImproperlyConfigured(
                &quot;Requested %s, but settings are not configured. &quot;
                &quot;You must either define the environment variable %s &quot;
                &quot;or call settings.configure() before accessing settings.&quot;
&gt;               % (desc, ENVIRONMENT_VARIABLE))
E           django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:42: ImproperlyConfigured</failure></testcase><testcase classname="nextgenmusic.tests.test_urls.TestUrls" file="nextgenmusic\tests\test_urls.py" line="26" name="test_logout_url" time="0.000993490219116211"><failure message="django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.">self = &lt;test_urls.TestUrls object at 0x047CCC70&gt;

    def test_logout_url(self):
&gt;       path = reverse(&apos;logout&apos;)

softwareengineering\nextgenmusic\tests\test_urls.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\program files (x86)\python37-32\lib\site-packages\django\urls\base.py:30: in reverse
    resolver = get_resolver(urlconf)
c:\program files (x86)\python37-32\lib\site-packages\django\urls\resolvers.py:66: in get_resolver
    urlconf = settings.ROOT_URLCONF
c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:57: in __getattr__
    self._setup(name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;LazySettings [Unevaluated]&gt;, name = &apos;ROOT_URLCONF&apos;

    def _setup(self, name=None):
        &quot;&quot;&quot;
        Load the settings module pointed to by the environment variable. This
        is used the first time settings are needed, if the user hasn&apos;t
        configured settings manually.
        &quot;&quot;&quot;
        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)
        if not settings_module:
            desc = (&quot;setting %s&quot; % name) if name else &quot;settings&quot;
            raise ImproperlyConfigured(
                &quot;Requested %s, but settings are not configured. &quot;
                &quot;You must either define the environment variable %s &quot;
                &quot;or call settings.configure() before accessing settings.&quot;
&gt;               % (desc, ENVIRONMENT_VARIABLE))
E           django.core.exceptions.ImproperlyConfigured: Requested setting ROOT_URLCONF, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

c:\program files (x86)\python37-32\lib\site-packages\django\conf\__init__.py:42: ImproperlyConfigured</failure></testcase></testsuite>